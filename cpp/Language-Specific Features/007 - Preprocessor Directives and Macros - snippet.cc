#include <iostream>

// Preprocessor directives are lines included in the code of programs preceded by a hash sign (#). 
// These lines are not program statements but directives for the preprocessor. 

// The preprocessor examines the code before actual compilation of code begins and resolves all these directives before any code is actually generated by regular statements.

// This is a simple demonstration of a preprocessor directive
#define PI 3.14159

// Macros are a piece of code in a program which is given some name. 
// Whenever this name is encountered by the compiler the compiler replaces the name with the actual piece of code. 

// This is a simple demonstration of a macro
#define AREA(r) (PI*r*r)

int main() {
    float radius = 5.0;

    // Using the defined macro to calculate the area of a circle
    std::cout << "Area of the circle: " << AREA(radius) << std::endl; // Expected output: Area of the circle: 78.5397

    // Preprocessor directives can also be used for conditional compilation
    // The following code will only be compiled if PI is defined
    #ifdef PI
        std::cout << "PI is defined" << std::endl; // Expected output: PI is defined
    #endif

    // The following code will only be compiled if PI is not defined
    #ifndef PI
        std::cout << "PI is not defined" << std::endl;
    #endif

    // Preprocessor directives can also be used to include files
    // The following line includes the iostream file
    #include <iostream>

    return 0;
}
